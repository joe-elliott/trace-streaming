// Code generated by protoc-gen-go. DO NOT EDIT.
// source: blerg.proto

/*
Package blergproto is a generated protocol buffer package.

It is generated from these files:
	blerg.proto

It has these top-level messages:
	StreamRequest
	SpanResponse
*/
package blergproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import opentelemetry_proto_trace_v1 "github.com/open-telemetry/opentelemetry-proto/gen/go/trace/v1"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StreamRequest struct {
	RequestedBatchSize int32 `protobuf:"varint,1,opt,name=requestedBatchSize" json:"requestedBatchSize,omitempty"`
	RequestedRate      int32 `protobuf:"varint,2,opt,name=requestedRate" json:"requestedRate,omitempty"`
}

func (m *StreamRequest) Reset()                    { *m = StreamRequest{} }
func (m *StreamRequest) String() string            { return proto.CompactTextString(m) }
func (*StreamRequest) ProtoMessage()               {}
func (*StreamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *StreamRequest) GetRequestedBatchSize() int32 {
	if m != nil {
		return m.RequestedBatchSize
	}
	return 0
}

func (m *StreamRequest) GetRequestedRate() int32 {
	if m != nil {
		return m.RequestedRate
	}
	return 0
}

type SpanResponse struct {
	Dropped int32                                `protobuf:"varint,1,opt,name=dropped" json:"dropped,omitempty"`
	Spans   []*opentelemetry_proto_trace_v1.Span `protobuf:"bytes,2,rep,name=spans" json:"spans,omitempty"`
}

func (m *SpanResponse) Reset()                    { *m = SpanResponse{} }
func (m *SpanResponse) String() string            { return proto.CompactTextString(m) }
func (*SpanResponse) ProtoMessage()               {}
func (*SpanResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SpanResponse) GetDropped() int32 {
	if m != nil {
		return m.Dropped
	}
	return 0
}

func (m *SpanResponse) GetSpans() []*opentelemetry_proto_trace_v1.Span {
	if m != nil {
		return m.Spans
	}
	return nil
}

func init() {
	proto.RegisterType((*StreamRequest)(nil), "blergproto.StreamRequest")
	proto.RegisterType((*SpanResponse)(nil), "blergproto.SpanResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SpanStream service

type SpanStreamClient interface {
	Tail(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (SpanStream_TailClient, error)
}

type spanStreamClient struct {
	cc *grpc.ClientConn
}

func NewSpanStreamClient(cc *grpc.ClientConn) SpanStreamClient {
	return &spanStreamClient{cc}
}

func (c *spanStreamClient) Tail(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (SpanStream_TailClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SpanStream_serviceDesc.Streams[0], c.cc, "/blergproto.SpanStream/Tail", opts...)
	if err != nil {
		return nil, err
	}
	x := &spanStreamTailClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SpanStream_TailClient interface {
	Recv() (*SpanResponse, error)
	grpc.ClientStream
}

type spanStreamTailClient struct {
	grpc.ClientStream
}

func (x *spanStreamTailClient) Recv() (*SpanResponse, error) {
	m := new(SpanResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for SpanStream service

type SpanStreamServer interface {
	Tail(*StreamRequest, SpanStream_TailServer) error
}

func RegisterSpanStreamServer(s *grpc.Server, srv SpanStreamServer) {
	s.RegisterService(&_SpanStream_serviceDesc, srv)
}

func _SpanStream_Tail_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SpanStreamServer).Tail(m, &spanStreamTailServer{stream})
}

type SpanStream_TailServer interface {
	Send(*SpanResponse) error
	grpc.ServerStream
}

type spanStreamTailServer struct {
	grpc.ServerStream
}

func (x *spanStreamTailServer) Send(m *SpanResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _SpanStream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "blergproto.SpanStream",
	HandlerType: (*SpanStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Tail",
			Handler:       _SpanStream_Tail_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "blerg.proto",
}

func init() { proto.RegisterFile("blerg.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 218 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x8f, 0xbd, 0x4e, 0x03, 0x31,
	0x10, 0x84, 0xb9, 0x40, 0x40, 0xda, 0x23, 0xcd, 0x56, 0x26, 0x55, 0x64, 0x51, 0xa4, 0xb2, 0x20,
	0x34, 0x74, 0x48, 0xf4, 0x34, 0x3e, 0x5e, 0xc0, 0x97, 0x1b, 0x41, 0xa4, 0x8b, 0x6d, 0xec, 0x05,
	0x09, 0x9e, 0x1e, 0x61, 0xf3, 0x77, 0x52, 0xba, 0x9d, 0x19, 0x7b, 0x34, 0x1f, 0xb5, 0xfd, 0x88,
	0xf4, 0x64, 0x62, 0x0a, 0x12, 0x98, 0x8a, 0x28, 0xf7, 0xb2, 0x95, 0xe4, 0xb6, 0xa8, 0x81, 0x06,
	0x2d, 0x3a, 0x49, 0x70, 0x7b, 0x8b, 0x97, 0x57, 0x64, 0x61, 0x43, 0x9c, 0xea, 0x89, 0xe1, 0xde,
	0xc9, 0xf6, 0xb9, 0xdb, 0x7d, 0x40, 0x35, 0xab, 0x66, 0x3d, 0xb7, 0x07, 0x12, 0xbe, 0xa4, 0xc5,
	0xaf, 0x6b, 0x9d, 0x40, 0xcd, 0xca, 0xd3, 0xa9, 0xa9, 0x7b, 0x3a, 0xef, 0xa2, 0xf3, 0x16, 0x39,
	0x06, 0x9f, 0xc1, 0x8a, 0xce, 0x86, 0x14, 0x62, 0xc4, 0xf0, 0x5d, 0xfd, 0x23, 0xf9, 0x96, 0xe6,
	0x39, 0x3a, 0x9f, 0xd5, 0x6c, 0x75, 0xbc, 0x6e, 0x37, 0xda, 0x84, 0x08, 0x2f, 0x18, 0xb1, 0x87,
	0xa4, 0xf7, 0xba, 0xda, 0x54, 0x82, 0xb7, 0x6b, 0x53, 0x4a, 0xeb, 0x87, 0xcd, 0x03, 0xd1, 0x97,
	0xac, 0x38, 0x7c, 0x47, 0x27, 0x8f, 0x6e, 0x37, 0xf2, 0x85, 0xf9, 0x43, 0x37, 0x13, 0xd4, 0xa5,
	0x9a, 0x44, 0xff, 0xe6, 0xe9, 0xa3, 0xab, 0xa6, 0x3f, 0x2d, 0xfe, 0xcd, 0x67, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xa9, 0x22, 0xd0, 0x2f, 0x48, 0x01, 0x00, 0x00,
}
